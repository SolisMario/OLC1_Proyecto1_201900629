/*
 * Ejemplo desarrollado por Erick Navarro
 * Blog: e-navarro.blogspot.com
 * Julio - 2018
 */

package analizadores; 
import java_cup.runtime.*;
import java.util.LinkedList;

parser code 
{:
    //Variable utilizada para almacenar los arboles
    public LinkedList<String> nombresConjuntos = new LinkedList<>();
    public LinkedList<String> nombresUtilizados = new LinkedList<>();
    public LinkedList<String> sueltos = new LinkedList<>();


    public int identificador = 0;
    public int identificadorNodos = 0;

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }

    public void guardarConjunto(String nombre, String cadena) {
        if (!nombresConjuntos.contains(nombre)) {
            LinkedList<String> elementos = new LinkedList<>();
            nombresConjuntos.add(nombre);
            if (cadena.endsWith("Rango")) {
                int inicio = cadena.charAt(0);
                int fin = cadena.charAt(2);
                for (int i = inicio; i <= fin; i++) {
                    elementos.add(String.valueOf((char) i));
                }
            }
            else if(cadena.endsWith("Comas")){
                String[] componentes = cadena.split(",");
                for(int i = 0; i < componentes.length - 1; i++){
                    elementos.add(componentes[i]);
                }
            }
            Conjunto conjunto = new Conjunto(nombre, elementos);
            olc1_proyecto1_201900629.OLC1_Proyecto1_201900629.listaConjuntos.add(conjunto);
        }
    }

    public void guardarAlfabeto(String cadena){
        if(cadena.length() > 1){
            if(!sueltos.contains(cadena)){
                sueltos.add(cadena);
            }
        }
    }
:} 

terminal String PTCOMA, GUION, MAYOR;
terminal String LLAVEIZQ, LLAVEDER, DOSPT, PORCENTDOB;
terminal String COMILLADOB, VIRGULILLA, COMA;
terminal String CONCAT, DISYUNC, CEROMAS, UNOMAS, CEROUNA; 
terminal String CARACTER, IDENTIFICADOR, LEXEMA, CARESP, USORESERVADAS;
terminal String RCONJ;

non terminal ini;
non terminal cuerpo;
non terminal declaraciones;
non terminal defConjunto;
non terminal String defNotacion;
non terminal defExpReg;
non terminal Nodo defNotacionRegex;
non terminal expEvaluar;
non terminal String identificador;

start with ini;

ini::=
    LLAVEIZQ cuerpo LLAVEDER
;

cuerpo::=
    declaraciones PORCENTDOB expEvaluar

; 

declaraciones ::=
   defConjunto declaraciones
 | defExpReg declaraciones
 | error declaraciones
 | PORCENTDOB
;

defConjunto ::= 
   RCONJ DOSPT identificador:id GUION MAYOR defNotacion:a PTCOMA
{:
    parser.guardarConjunto(id, a);
:}
;

identificador ::=
    IDENTIFICADOR:a                 {:RESULT=a ;:}
 |  CARESP:a identificador:b        {:RESULT=a + b ;:}
 |  IDENTIFICADOR:a identificador:b {:RESULT=a+b ;:}
 |  CARESP:a                        {:RESULT=a ;:}
 |  CARACTER:a                      {:RESULT=a ;:}
 |  CARACTER:a identificador:b      {:RESULT=a+b ;:}
;

defNotacion ::=
    CARESP:a VIRGULILLA CARESP:b        {:RESULT= a + "_" + b + "_Rango";:}
 |  CARACTER:a VIRGULILLA CARACTER:b    {:RESULT= a + "_" + b + "_Rango";:}
 |  CARESP:a COMA defNotacion:b         {:RESULT= a  + "," + b;:}
 |  CARACTER:a COMA defNotacion:b       {:RESULT= a  + "," + b;:}
 |  CARESP:a                            {:RESULT= a + ",Comas";:}
 |  CARACTER:a                          {:RESULT= a + ",Comas" ;:}
;

defExpReg ::=
    identificador:id GUION MAYOR defNotacionRegex:a PTCOMA
{:
    if(!olc1_proyecto1_201900629.OLC1_Proyecto1_201900629.listaNombresArboles.contains(id)){            
    parser.identificador += 1;
    Nodo finaliza = new Nodo("#", null, null, "#", String.valueOf(identificador));
    Nodo raiz = new Nodo(".", a, finaliza, "1000", null);
    Arbol arbolito = new Arbol(id, raiz);
    Arbol.getAlfabeto(arbolito, arbolito.root);
    Arbol.getHoja(arbolito);
    Arbol.setAnulables(arbolito.root);
    Arbol.setPrimeros(arbolito.root);
    Arbol.setUltimos(arbolito.root);
    Arbol.getSiguientes(arbolito, arbolito.root);
    Arbol.esteticaSiguientes(arbolito);
    Arbol.tablaTransiciones(arbolito);

    arbolito.sueltos  = new Conjunto("sueltos", parser.sueltos);

    Arbol.imprimirArbol(arbolito);
    Arbol.graficarAFD(arbolito);
    Arbol.reporteSiguienes(arbolito);
    Arbol.reporteTransiciones(arbolito);

    olc1_proyecto1_201900629.OLC1_Proyecto1_201900629.listaArboles.add(arbolito);
    olc1_proyecto1_201900629.OLC1_Proyecto1_201900629.listaNombresArboles.add(id);
}
    parser.sueltos.clear();
    parser.identificador = 0;
    parser.identificadorNodos = 0;
:}
;

defNotacionRegex ::=
    LLAVEIZQ identificador:hoja LLAVEDER                 
    {:parser.identificador += 1; 
    parser.identificadorNodos += 1; 
    RESULT=new Nodo(hoja, null, null, String.valueOf(identificadorNodos), String.valueOf(parser.identificador));
    if(!parser.nombresUtilizados.contains(hoja)){
        parser.nombresUtilizados.add(hoja);
    }:}
 |  CONCAT defNotacionRegex:izq defNotacionRegex:der     
    {:parser.identificadorNodos += 1;
     RESULT=new Nodo(".", izq, der, String.valueOf(identificadorNodos), null);:}
 |  DISYUNC defNotacionRegex:izq defNotacionRegex:der    
    {:parser.identificadorNodos += 1; 
    RESULT=new Nodo("|", izq, der, String.valueOf(identificadorNodos), null);:}
 |  CEROMAS defNotacionRegex:unico                       
    {:parser.identificadorNodos += 1; 
    RESULT=new Nodo("*", null, unico, String.valueOf(identificadorNodos), null);:}
 |  UNOMAS defNotacionRegex:unico                        
    {:parser.identificadorNodos += 1; 
    RESULT=new Nodo("+", null, unico, String.valueOf(identificadorNodos), null);:}
 |  CEROUNA defNotacionRegex:unico                       
    {:parser.identificadorNodos += 1; 
    RESULT=new Nodo("?", null, unico, String.valueOf(identificadorNodos), null);:}
 |  USORESERVADAS:hoja                                   
    {:parser.identificadorNodos += 1; 
    parser.identificador += 1; 
    RESULT=new Nodo(hoja, null, null, String.valueOf(identificadorNodos), String.valueOf(parser.identificador));
    parser.guardarAlfabeto(hoja.replaceAll("\"", ""));:}
 |  COMILLADOB CARACTER:hoja COMILLADOB                  
    {:parser.identificadorNodos += 1; 
    parser.identificador += 1; 
    RESULT=new Nodo(hoja, null, null, String.valueOf(identificadorNodos), String.valueOf(parser.identificador));
    parser.guardarAlfabeto(hoja);:}
|  COMILLADOB CARESP:hoja COMILLADOB                  
    {:parser.identificadorNodos += 1; 
    parser.identificador += 1; 
    RESULT=new Nodo(hoja, null, null, String.valueOf(identificadorNodos), String.valueOf(parser.identificador));
    parser.guardarAlfabeto(hoja);
:}
;

expEvaluar ::=
    IDENTIFICADOR:id DOSPT COMILLADOB LEXEMA:lex COMILLADOB PTCOMA expEvaluar
    {:Lexema lexema = new Lexema(id, lex);
    olc1_proyecto1_201900629.OLC1_Proyecto1_201900629.listaLexemas.add(lexema);
    :}
 |  IDENTIFICADOR:id DOSPT COMILLADOB LEXEMA:lex COMILLADOB PTCOMA
    {:Lexema lexema = new Lexema(id, lex);
    olc1_proyecto1_201900629.OLC1_Proyecto1_201900629.listaLexemas.add(lexema);
    :}
 |  IDENTIFICADOR:id DOSPT COMILLADOB identificador:lex COMILLADOB PTCOMA expEvaluar
    {:Lexema lexema = new Lexema(id, lex);
    olc1_proyecto1_201900629.OLC1_Proyecto1_201900629.listaLexemas.add(lexema);
    :}
 |  IDENTIFICADOR:id DOSPT COMILLADOB identificador:lex COMILLADOB PTCOMA
    {:Lexema lexema = new Lexema(id, lex);
    olc1_proyecto1_201900629.OLC1_Proyecto1_201900629.listaLexemas.add(lexema);
    :}
;