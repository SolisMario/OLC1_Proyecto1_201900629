
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\004\000\002\002\005\000\002\003" +
    "\005\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\003\000\002\005\010\000\002\012\003\000" +
    "\002\012\004\000\002\012\004\000\002\012\003\000\002" +
    "\012\003\000\002\012\004\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\003" +
    "\000\002\006\003\000\002\007\006\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\004\000\002" +
    "\010\004\000\002\010\004\000\002\010\003\000\002\010" +
    "\005\000\002\011\011\000\002\011\010\000\002\011\011" +
    "\000\002\011\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\110\000\004\005\005\001\002\000\004\002\112\001" +
    "\002\000\016\003\013\010\012\022\015\023\017\025\020" +
    "\027\007\001\002\000\016\003\013\010\012\022\015\023" +
    "\017\025\020\027\007\001\002\000\004\007\072\001\002" +
    "\000\016\003\013\010\012\022\015\023\017\025\020\027" +
    "\007\001\002\000\004\010\054\001\002\000\004\010\ufffb" +
    "\001\002\000\016\003\013\010\012\022\015\023\017\025" +
    "\020\027\007\001\002\000\004\006\052\001\002\000\016" +
    "\006\ufff5\011\ufff5\012\ufff5\022\015\023\017\025\020\001" +
    "\002\000\004\012\023\001\002\000\016\006\ufff9\011\ufff9" +
    "\012\ufff9\022\015\023\017\025\020\001\002\000\016\006" +
    "\ufff6\011\ufff6\012\ufff6\022\015\023\017\025\020\001\002" +
    "\000\010\006\ufff8\011\ufff8\012\ufff8\001\002\000\010\006" +
    "\ufff7\011\ufff7\012\ufff7\001\002\000\022\005\034\011\033" +
    "\015\031\016\030\017\025\020\027\021\024\026\032\001" +
    "\002\000\022\005\034\011\033\015\031\016\030\017\025" +
    "\020\027\021\024\026\032\001\002\000\022\005\034\011" +
    "\033\015\031\016\030\017\025\020\027\021\024\026\032" +
    "\001\002\000\004\004\046\001\002\000\022\005\034\011" +
    "\033\015\031\016\030\017\025\020\027\021\024\026\032" +
    "\001\002\000\022\005\034\011\033\015\031\016\030\017" +
    "\025\020\027\021\024\026\032\001\002\000\022\005\034" +
    "\011\033\015\031\016\030\017\025\020\027\021\024\026" +
    "\032\001\002\000\024\004\uffe6\005\uffe6\011\uffe6\015\uffe6" +
    "\016\uffe6\017\uffe6\020\uffe6\021\uffe6\026\uffe6\001\002\000" +
    "\010\022\015\023\017\025\020\001\002\000\010\022\015" +
    "\023\017\025\020\001\002\000\004\006\036\001\002\000" +
    "\024\004\uffec\005\uffec\011\uffec\015\uffec\016\uffec\017\uffec" +
    "\020\uffec\021\uffec\026\uffec\001\002\000\004\011\040\001" +
    "\002\000\024\004\uffe5\005\uffe5\011\uffe5\015\uffe5\016\uffe5" +
    "\017\uffe5\020\uffe5\021\uffe5\026\uffe5\001\002\000\022\005" +
    "\034\011\033\015\031\016\030\017\025\020\027\021\024" +
    "\026\032\001\002\000\024\004\uffeb\005\uffeb\011\uffeb\015" +
    "\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\026\uffeb\001\002" +
    "\000\022\005\034\011\033\015\031\016\030\017\025\020" +
    "\027\021\024\026\032\001\002\000\024\004\uffea\005\uffea" +
    "\011\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\026" +
    "\uffea\001\002\000\024\004\uffe8\005\uffe8\011\uffe8\015\uffe8" +
    "\016\uffe8\017\uffe8\020\uffe8\021\uffe8\026\uffe8\001\002\000" +
    "\016\003\uffed\010\uffed\022\uffed\023\uffed\025\uffed\027\uffed" +
    "\001\002\000\024\004\uffe9\005\uffe9\011\uffe9\015\uffe9\016" +
    "\uffe9\017\uffe9\020\uffe9\021\uffe9\026\uffe9\001\002\000\024" +
    "\004\uffe7\005\uffe7\011\uffe7\015\uffe7\016\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\026\uffe7\001\002\000\010\006\ufff4\011\ufff4" +
    "\012\ufff4\001\002\000\004\002\000\001\002\000\004\010" +
    "\ufffc\001\002\000\004\023\055\001\002\000\004\007\057" +
    "\001\002\000\004\006\uffff\001\002\000\004\011\060\001" +
    "\002\000\012\022\015\023\017\024\062\025\020\001\002" +
    "\000\004\011\066\001\002\000\004\011\063\001\002\000" +
    "\004\004\064\001\002\000\006\006\uffe3\023\055\001\002" +
    "\000\004\006\uffe4\001\002\000\004\004\067\001\002\000" +
    "\006\006\uffe1\023\055\001\002\000\004\006\uffe2\001\002" +
    "\000\004\010\ufffe\001\002\000\010\022\015\023\017\025" +
    "\020\001\002\000\004\012\074\001\002\000\006\022\077" +
    "\025\075\001\002\000\010\004\uffef\013\106\014\105\001" +
    "\002\000\004\004\104\001\002\000\010\004\uffee\013\101" +
    "\014\100\001\002\000\006\022\077\025\075\001\002\000" +
    "\004\022\102\001\002\000\004\004\ufff2\001\002\000\004" +
    "\004\ufff0\001\002\000\016\003\ufffa\010\ufffa\022\ufffa\023" +
    "\ufffa\025\ufffa\027\ufffa\001\002\000\006\022\077\025\075" +
    "\001\002\000\004\025\107\001\002\000\004\004\ufff3\001" +
    "\002\000\004\004\ufff1\001\002\000\004\010\ufffd\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\110\000\004\002\003\001\001\000\002\001\001\000" +
    "\014\003\013\004\010\005\007\007\005\012\015\001\001" +
    "\000\012\004\110\005\007\007\005\012\015\001\001\000" +
    "\002\001\001\000\012\004\070\005\007\007\005\012\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\052\005\007\007\005\012\015\001\001\000\002\001\001" +
    "\000\004\012\050\001\001\000\002\001\001\000\004\012" +
    "\021\001\001\000\004\012\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\025\001\001\000\004\010" +
    "\047\001\001\000\004\010\046\001\001\000\002\001\001" +
    "\000\004\010\044\001\001\000\004\010\042\001\001\000" +
    "\004\010\040\001\001\000\002\001\001\000\004\012\036" +
    "\001\001\000\004\012\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\041\001\001\000\002\001\001\000\004\010\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\072\001\001\000" +
    "\002\001\001\000\004\006\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //Variable utilizada para almacenar los arboles
    public LinkedList<Arbol> Arboles = new LinkedList<Arbol>();
    public LinkedList<String> nombresConjuntos = new LinkedList<>();
    public LinkedList<String> nombresUtilizados = new LinkedList<>();
    public LinkedList<Conjunto> conjuntos = new LinkedList<Conjunto>();
    public LinkedList<String> sueltos = new LinkedList<>();
    public LinkedList<String> palabras = new LinkedList<>();

    //variables utilizadas para identificar hojas y nodos
    public int identificador = 0;
    public int identificadorNodos = 0;

    //Método al que se llama automáticamente ante algún error sintactico.
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

     //Método al que se llama automáticamente ante algún error sintáctico 
     //en el que ya no es posible una recuperación de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }

    public void guardarConjunto(String nombre, String cadena) {
        if (!nombresConjuntos.contains(nombre)) {
            LinkedList<String> elementos = new LinkedList<>();
            nombresConjuntos.add(nombre);
            if (cadena.endsWith("Rango")) {
                int inicio = cadena.charAt(0);
                int fin = cadena.charAt(2);
                for (int i = inicio; i <= fin; i++) {
                    elementos.add(String.valueOf((char) i));
                }
            }
            else if(cadena.endsWith("Comas")){
                String[] componentes = cadena.split(",");
                for(int i = 0; i < componentes.length - 1; i++){
                    elementos.add(componentes[i]);
                }
            }
            System.out.println("elementos: " + elementos);
            Conjunto conjunto = new Conjunto(nombre, elementos);
            conjuntos.add(conjunto);
        }
        System.out.println(nombresConjuntos);
    }

    public void guardarAlfabeto(String cadena){
        if(cadena.length() > 1){
            if(!palabras.contains(cadena)){
                palabras.add(cadena);
            }
        }else{
            if(!sueltos.contains(cadena)){
                sueltos.add(cadena);
            }
        }
    }

    public void seleccionarConjuntos(Arbol arbol){
        for(int i = 0; i < nombresUtilizados.size(); i++){
                System.out.println(nombresUtilizados.get(i));
            for(int j = 0; j < conjuntos.size(); j++){
                System.out.println(conjuntos.get(j).nombre);
                if(nombresUtilizados.get(i).equals(conjuntos.get(j).nombre)){
                    arbol.conjuntos.add(conjuntos.get(j));
                    break;
                }
            }
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cuerpo ::= declaraciones PORCENTDOB expEvaluar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= defConjunto declaraciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= defExpReg declaraciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaraciones ::= error declaraciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaraciones ::= PORCENTDOB 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // defConjunto ::= RCONJ DOSPT identificador ASIGNA defNotacion PTCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
    parser.guardarConjunto(id, a);

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defConjunto",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // identificador ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a ;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("identificador",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // identificador ::= CARESP identificador 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a+b ;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("identificador",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // identificador ::= IDENTIFICADOR identificador 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a+b ;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("identificador",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // identificador ::= CARESP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a ;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("identificador",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // identificador ::= CARACTER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a ;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("identificador",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // identificador ::= CARACTER identificador 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a+b ;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("identificador",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // defNotacion ::= CARESP VIRGULILLA CARESP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= a + "_" + b + "_Rango";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // defNotacion ::= CARACTER VIRGULILLA CARACTER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= a + "_" + b + "_Rango";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // defNotacion ::= CARESP COMA defNotacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= a  + "," + b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // defNotacion ::= CARACTER COMA defNotacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= a  + "," + b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // defNotacion ::= CARESP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= a + ",Comas";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // defNotacion ::= CARACTER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= a + ",Comas" ;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // defExpReg ::= identificador ASIGNA defNotacionRegex PTCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defExpReg",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // defNotacionRegex ::= LLAVEIZQ identificador LLAVEDER 
            {
              Nodo RESULT =null;
		int hojaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int hojaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String hoja = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		parser.identificador += 1; 
    parser.identificadorNodos += 1; 
    RESULT=new Nodo(hoja, null, null, String.valueOf(identificadorNodos), String.valueOf(parser.identificador));
    if(!parser.nombresUtilizados.contains(hoja)){
        System.out.println("nombre de Conjunto insertado: " + hoja);
        parser.nombresUtilizados.add(hoja);
    }
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacionRegex",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // defNotacionRegex ::= CONCAT defNotacionRegex defNotacionRegex 
            {
              Nodo RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo izq = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo der = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.identificadorNodos += 1;
     RESULT=new Nodo(".", izq, der, String.valueOf(identificadorNodos), null);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacionRegex",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // defNotacionRegex ::= DISYUNC defNotacionRegex defNotacionRegex 
            {
              Nodo RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo izq = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo der = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.identificadorNodos += 1; 
    RESULT=new Nodo("|", izq, der, String.valueOf(identificadorNodos), null);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacionRegex",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // defNotacionRegex ::= CEROMAS defNotacionRegex 
            {
              Nodo RESULT =null;
		int unicoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int unicoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo unico = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.identificadorNodos += 1; 
    RESULT=new Nodo("*", null, unico, String.valueOf(identificadorNodos), null);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacionRegex",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // defNotacionRegex ::= UNOMAS defNotacionRegex 
            {
              Nodo RESULT =null;
		int unicoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int unicoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo unico = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.identificadorNodos += 1; 
    RESULT=new Nodo("+", null, unico, String.valueOf(identificadorNodos), null);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacionRegex",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // defNotacionRegex ::= CEROUNA defNotacionRegex 
            {
              Nodo RESULT =null;
		int unicoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int unicoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo unico = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.identificadorNodos += 1; 
    RESULT=new Nodo("?", null, unico, String.valueOf(identificadorNodos), null);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacionRegex",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // defNotacionRegex ::= USORESERVADAS 
            {
              Nodo RESULT =null;
		int hojaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int hojaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String hoja = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.identificadorNodos += 1; 
    parser.identificador += 1; 
    RESULT=new Nodo(hoja, null, null, String.valueOf(identificadorNodos), String.valueOf(parser.identificador));
    parser.guardarAlfabeto(hoja.replaceAll("\"", ""));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacionRegex",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // defNotacionRegex ::= COMILLADOB identificador COMILLADOB 
            {
              Nodo RESULT =null;
		int hojaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int hojaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String hoja = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		parser.identificadorNodos += 1; 
    parser.identificador += 1; 
    RESULT=new Nodo(hoja, null, null, String.valueOf(identificadorNodos), String.valueOf(parser.identificador));
    parser.guardarAlfabeto(hoja);

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacionRegex",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expEvaluar ::= IDENTIFICADOR DOSPT COMILLADOB LEXEMA COMILLADOB PTCOMA expEvaluar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expEvaluar",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expEvaluar ::= IDENTIFICADOR DOSPT COMILLADOB LEXEMA COMILLADOB PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expEvaluar",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expEvaluar ::= IDENTIFICADOR DOSPT COMILLADOB identificador COMILLADOB PTCOMA expEvaluar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expEvaluar",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expEvaluar ::= IDENTIFICADOR DOSPT COMILLADOB identificador COMILLADOB PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expEvaluar",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
