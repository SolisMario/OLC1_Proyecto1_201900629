
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.ArrayList;
import Errores.Excepcion;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\042\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\003\005\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\003\000\002\005\011\000" +
    "\002\012\004\000\002\012\004\000\002\012\004\000\002" +
    "\012\004\000\002\012\004\000\002\012\003\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\003\000\002\006\003\000\002\007\007\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\004\000\002\010\004\000\002\010\004\000\002\010" +
    "\003\000\002\010\005\000\002\010\005\000\002\010\003" +
    "\000\002\011\010\000\002\011\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\006\003\005\007\006\001\002\000\004\002" +
    "\121\001\002\000\006\003\005\007\006\001\002\000\012" +
    "\003\012\012\015\024\014\031\010\001\002\000\004\012" +
    "\075\001\002\000\004\011\055\001\002\000\004\010\054" +
    "\001\002\000\012\003\012\012\015\024\014\031\010\001" +
    "\002\000\012\003\012\012\015\024\014\031\010\001\002" +
    "\000\004\005\020\001\002\000\004\012\ufffa\001\002\000" +
    "\012\003\012\012\015\024\014\031\010\001\002\000\004" +
    "\012\ufffd\001\002\000\004\006\021\001\002\000\024\007" +
    "\033\013\032\016\030\017\027\020\024\021\025\022\023" +
    "\027\031\030\022\001\002\000\026\004\uffe2\007\uffe2\013" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\027\uffe2" +
    "\030\uffe2\001\002\000\024\007\033\013\032\016\030\017" +
    "\027\020\024\021\025\022\023\027\031\030\022\001\002" +
    "\000\024\007\033\013\032\016\030\017\027\020\024\021" +
    "\025\022\023\027\031\030\022\001\002\000\024\007\033" +
    "\013\032\016\030\017\027\020\024\021\025\022\023\027" +
    "\031\030\022\001\002\000\004\004\046\001\002\000\024" +
    "\007\033\013\032\016\030\017\027\020\024\021\025\022" +
    "\023\027\031\030\022\001\002\000\024\007\033\013\032" +
    "\016\030\017\027\020\024\021\025\022\023\027\031\030" +
    "\022\001\002\000\026\004\uffe5\007\uffe5\013\uffe5\016\uffe5" +
    "\017\uffe5\020\uffe5\021\uffe5\022\uffe5\027\uffe5\030\uffe5\001" +
    "\002\000\006\023\037\026\036\001\002\000\004\024\034" +
    "\001\002\000\004\010\035\001\002\000\026\004\uffeb\007" +
    "\uffeb\013\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb" +
    "\027\uffeb\030\uffeb\001\002\000\004\013\041\001\002\000" +
    "\004\013\040\001\002\000\026\004\uffe4\007\uffe4\013\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\027\uffe4\030" +
    "\uffe4\001\002\000\026\004\uffe3\007\uffe3\013\uffe3\016\uffe3" +
    "\017\uffe3\020\uffe3\021\uffe3\022\uffe3\027\uffe3\030\uffe3\001" +
    "\002\000\024\007\033\013\032\016\030\017\027\020\024" +
    "\021\025\022\023\027\031\030\022\001\002\000\026\004" +
    "\uffea\007\uffea\013\uffea\016\uffea\017\uffea\020\uffea\021\uffea" +
    "\022\uffea\027\uffea\030\uffea\001\002\000\024\007\033\013" +
    "\032\016\030\017\027\020\024\021\025\022\023\027\031" +
    "\030\022\001\002\000\026\004\uffe9\007\uffe9\013\uffe9\016" +
    "\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\027\uffe9\030\uffe9" +
    "\001\002\000\012\003\uffec\012\uffec\024\uffec\031\uffec\001" +
    "\002\000\026\004\uffe7\007\uffe7\013\uffe7\016\uffe7\017\uffe7" +
    "\020\uffe7\021\uffe7\022\uffe7\027\uffe7\030\uffe7\001\002\000" +
    "\026\004\uffe8\007\uffe8\013\uffe8\016\uffe8\017\uffe8\020\uffe8" +
    "\021\uffe8\022\uffe8\027\uffe8\030\uffe8\001\002\000\026\004" +
    "\uffe6\007\uffe6\013\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6" +
    "\022\uffe6\027\uffe6\030\uffe6\001\002\000\004\012\ufffc\001" +
    "\002\000\004\012\ufffb\001\002\000\004\002\000\001\002" +
    "\000\004\024\056\001\002\000\004\005\057\001\002\000" +
    "\004\006\060\001\002\000\006\023\063\026\062\001\002" +
    "\000\004\004\074\001\002\000\010\004\uffee\014\071\015" +
    "\070\001\002\000\010\004\uffed\014\065\015\064\001\002" +
    "\000\006\023\063\026\062\001\002\000\004\023\066\001" +
    "\002\000\004\004\ufff1\001\002\000\004\004\uffef\001\002" +
    "\000\006\023\063\026\062\001\002\000\004\026\072\001" +
    "\002\000\004\004\ufff2\001\002\000\004\004\ufff0\001\002" +
    "\000\012\003\ufff9\012\ufff9\024\ufff9\031\ufff9\001\002\000" +
    "\004\024\076\001\002\000\004\011\100\001\002\000\004" +
    "\010\ufffe\001\002\000\004\013\101\001\002\000\016\013" +
    "\105\023\106\024\102\025\107\026\104\030\103\001\002" +
    "\000\016\013\105\023\106\024\102\025\107\026\104\030" +
    "\103\001\002\000\016\013\105\023\106\024\102\025\107" +
    "\026\104\030\103\001\002\000\016\013\105\023\106\024" +
    "\102\025\107\026\104\030\103\001\002\000\004\004\ufff3" +
    "\001\002\000\016\013\105\023\106\024\102\025\107\026" +
    "\104\030\103\001\002\000\016\013\105\023\106\024\102" +
    "\025\107\026\104\030\103\001\002\000\004\004\111\001" +
    "\002\000\006\010\uffe0\024\076\001\002\000\004\010\uffe1" +
    "\001\002\000\004\004\ufff6\001\002\000\004\004\ufff5\001" +
    "\002\000\004\004\ufff8\001\002\000\004\004\ufff4\001\002" +
    "\000\004\004\ufff7\001\002\000\004\002\uffff\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\002\117\001\001\000\012\003\010\004\006\005\015" +
    "\007\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\052\005\015\007\012\001\001" +
    "\000\010\004\051\005\015\007\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\016\005\015\007\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\025\001\001\000\002\001\001\000\004\010\050\001\001" +
    "\000\004\010\047\001\001\000\004\010\046\001\001\000" +
    "\002\001\001\000\004\010\043\001\001\000\004\010\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\042\001\001\000\002\001\001\000\004\010\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\107\001\001\000\004" +
    "\012\116\001\001\000\004\012\115\001\001\000\004\012" +
    "\114\001\001\000\002\001\001\000\004\012\113\001\001" +
    "\000\004\012\112\001\001\000\002\001\001\000\004\011" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //Variable utilizada para almacenar los arboles
    public LinkedList<String> nombresConjuntos = new LinkedList<>();
    public LinkedList<String> nombresUtilizados = new LinkedList<>();
    public LinkedList<String> sueltos = new LinkedList<>();


    public int identificador = 0;
    public int identificadorNodos = 0;

    public ArrayList<Excepcion> errores = new ArrayList();

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
    errores.add(new Excepcion("Sináctico", "Error sintáctico, se detectó: " + s.value, "" + s.left, "" + s.right + ""));
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    /*public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido.");
    }*/

    public void guardarConjunto(String nombre, String cadena) {
        if (!nombresConjuntos.contains(nombre)) {
            LinkedList<String> elementos = new LinkedList<>();
            nombresConjuntos.add(nombre);
            if (cadena.endsWith("Rango")) {
                int inicio = cadena.charAt(0);
                int fin = cadena.charAt(2);
                for (int i = inicio; i <= fin; i++) {
                    elementos.add(String.valueOf((char) i));
                }
            }
            else if(cadena.endsWith("Comas")){
                String[] componentes = cadena.split(",");
                for(int i = 0; i < componentes.length - 1; i++){
                    elementos.add(componentes[i]);
                }
            }
            Conjunto conjunto = new Conjunto(nombre, elementos);
            olc1_proyecto1_201900629.OLC1_Proyecto1_201900629.listaConjuntos.add(conjunto);
        }
    }

    public void guardarAlfabeto(String cadena){
        if(cadena.length() > 1){
            if(!sueltos.contains(cadena)){
                sueltos.add(cadena);
            }
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ini ::= error ini 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cuerpo ::= declaraciones PORCENTDOB expEvaluar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= defConjunto declaraciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaraciones ::= defExpReg declaraciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaraciones ::= error declaraciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaraciones ::= PORCENTDOB 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // defConjunto ::= RCONJ DOSPT IDENTIFICADOR GUION MAYOR defNotacion PTCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
    parser.guardarConjunto(id, a);

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defConjunto",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expresion ::= CARESP expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a + b ;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expresion ::= IDENTIFICADOR expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a+b ;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expresion ::= LEXEMA expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a+b ;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresion ::= CARACTER expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a+b ;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresion ::= SALTOS expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a+b ;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresion ::= COMILLADOB 
            {
              String RESULT =null;
		RESULT="" ;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // defNotacion ::= CARESP VIRGULILLA CARESP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= a + "_" + b + "_Rango";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // defNotacion ::= CARACTER VIRGULILLA CARACTER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= a + "_" + b + "_Rango";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // defNotacion ::= CARESP COMA defNotacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= a  + "," + b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // defNotacion ::= CARACTER COMA defNotacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= a  + "," + b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // defNotacion ::= CARESP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= a + ",Comas";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // defNotacion ::= CARACTER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= a + ",Comas" ;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // defExpReg ::= IDENTIFICADOR GUION MAYOR defNotacionRegex PTCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
    if(!olc1_proyecto1_201900629.OLC1_Proyecto1_201900629.listaNombresArboles.contains(id)){            
    parser.identificador += 1;
    Nodo finaliza = new Nodo("#", null, null, "#", String.valueOf(identificador));
    Nodo raiz = new Nodo(".", a, finaliza, "1000", null);
    Arbol arbolito = new Arbol(id, raiz);
    Arbol.getAlfabeto(arbolito, arbolito.root);
    Arbol.getHoja(arbolito);
    Arbol.setAnulables(arbolito.root);
    Arbol.setPrimeros(arbolito.root);
    Arbol.setUltimos(arbolito.root);
    Arbol.getSiguientes(arbolito, arbolito.root);
    Arbol.esteticaSiguientes(arbolito);
    Arbol.tablaTransiciones(arbolito);

    arbolito.sueltos  = new Conjunto("sueltos", parser.sueltos);

    Arbol.imprimirArbol(arbolito);
    Arbol.graficarAFD(arbolito);
    Arbol.reporteSiguienes(arbolito);
    Arbol.reporteTransiciones(arbolito);
    AFN.graficarAFN(arbolito);

    olc1_proyecto1_201900629.OLC1_Proyecto1_201900629.listaArboles.add(arbolito);
    olc1_proyecto1_201900629.OLC1_Proyecto1_201900629.listaNombresArboles.add(id);
}
    parser.sueltos.clear();
    parser.identificador = 0;
    parser.identificadorNodos = 0;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defExpReg",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // defNotacionRegex ::= LLAVEIZQ IDENTIFICADOR LLAVEDER 
            {
              Nodo RESULT =null;
		int hojaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int hojaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String hoja = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		parser.identificador += 1; 
    parser.identificadorNodos += 1; 
    RESULT=new Nodo(hoja, null, null, String.valueOf(identificadorNodos), String.valueOf(parser.identificador));
    if(!parser.nombresUtilizados.contains(hoja)){
        parser.nombresUtilizados.add(hoja);
    }
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacionRegex",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // defNotacionRegex ::= CONCAT defNotacionRegex defNotacionRegex 
            {
              Nodo RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo izq = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo der = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.identificadorNodos += 1;
     RESULT=new Nodo(".", izq, der, String.valueOf(identificadorNodos), null);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacionRegex",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // defNotacionRegex ::= DISYUNC defNotacionRegex defNotacionRegex 
            {
              Nodo RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo izq = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo der = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.identificadorNodos += 1; 
    RESULT=new Nodo("|", izq, der, String.valueOf(identificadorNodos), null);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacionRegex",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // defNotacionRegex ::= CEROMAS defNotacionRegex 
            {
              Nodo RESULT =null;
		int unicoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int unicoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo unico = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.identificadorNodos += 1; 
    RESULT=new Nodo("*", null, unico, String.valueOf(identificadorNodos), null);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacionRegex",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // defNotacionRegex ::= UNOMAS defNotacionRegex 
            {
              Nodo RESULT =null;
		int unicoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int unicoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo unico = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.identificadorNodos += 1; 
    RESULT=new Nodo("+", null, unico, String.valueOf(identificadorNodos), null);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacionRegex",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // defNotacionRegex ::= CEROUNA defNotacionRegex 
            {
              Nodo RESULT =null;
		int unicoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int unicoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo unico = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.identificadorNodos += 1; 
    RESULT=new Nodo("?", null, unico, String.valueOf(identificadorNodos), null);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacionRegex",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // defNotacionRegex ::= USORESERVADAS 
            {
              Nodo RESULT =null;
		int hojaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int hojaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String hoja = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.identificadorNodos += 1; 
    parser.identificador += 1; 
    RESULT=new Nodo(hoja, null, null, String.valueOf(identificadorNodos), String.valueOf(parser.identificador));
    parser.guardarAlfabeto(hoja);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacionRegex",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // defNotacionRegex ::= COMILLADOB CARACTER COMILLADOB 
            {
              Nodo RESULT =null;
		int hojaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int hojaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String hoja = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		parser.identificadorNodos += 1; 
    parser.identificador += 1; 
    RESULT=new Nodo(hoja, null, null, String.valueOf(identificadorNodos), String.valueOf(parser.identificador));
    parser.guardarAlfabeto(hoja);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacionRegex",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // defNotacionRegex ::= COMILLADOB CARESP COMILLADOB 
            {
              Nodo RESULT =null;
		int hojaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int hojaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String hoja = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		parser.identificadorNodos += 1; 
    parser.identificador += 1; 
    RESULT=new Nodo(hoja, null, null, String.valueOf(identificadorNodos), String.valueOf(parser.identificador));
    parser.guardarAlfabeto(hoja);

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacionRegex",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // defNotacionRegex ::= SALTOS 
            {
              Nodo RESULT =null;
		int hojaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int hojaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String hoja = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.identificadorNodos += 1; 
    parser.identificador += 1; 
    RESULT=new Nodo(hoja, null, null, String.valueOf(identificadorNodos), String.valueOf(parser.identificador));
    parser.guardarAlfabeto(hoja);

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacionRegex",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expEvaluar ::= IDENTIFICADOR DOSPT COMILLADOB expresion PTCOMA expEvaluar 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int lexleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lexright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String lex = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		Lexema lexema = new Lexema(id, lex);
    olc1_proyecto1_201900629.OLC1_Proyecto1_201900629.listaLexemas.add(lexema);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expEvaluar",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expEvaluar ::= IDENTIFICADOR DOSPT COMILLADOB expresion PTCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int lexleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lexright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String lex = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		Lexema lexema = new Lexema(id, lex);
    olc1_proyecto1_201900629.OLC1_Proyecto1_201900629.listaLexemas.add(lexema);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expEvaluar",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
