//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------
package analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/**
 * CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

    public final Class getSymbolContainer() {
        return sym.class;
    }

    /**
     * Default constructor.
     */
    @Deprecated
    public Sintactico() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    @Deprecated
    public Sintactico(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][]
            = unpackFromStrings(new String[]{
        "\000\044\000\002\002\004\000\002\002\005\000\002\003"
        + "\005\000\002\004\004\000\002\004\004\000\002\004\004"
        + "\000\002\004\003\000\002\005\010\000\002\012\003\000"
        + "\002\012\004\000\002\012\004\000\002\012\003\000\002"
        + "\012\003\000\002\012\004\000\002\006\005\000\002\006"
        + "\005\000\002\006\004\000\002\006\004\000\002\006\004"
        + "\000\002\006\003\000\002\006\003\000\002\007\006\000"
        + "\002\010\005\000\002\010\005\000\002\010\005\000\002"
        + "\010\004\000\002\010\004\000\002\010\004\000\002\010"
        + "\005\000\002\010\005\000\002\010\003\000\002\010\003"
        + "\000\002\011\011\000\002\011\010\000\002\011\011\000"
        + "\002\011\010"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table
            = unpackFromStrings(new String[]{
        "\000\113\000\004\005\005\001\002\000\004\002\115\001"
        + "\002\000\016\003\013\010\012\022\016\023\017\025\020"
        + "\027\007\001\002\000\016\003\013\010\012\022\016\023"
        + "\017\025\020\027\007\001\002\000\004\007\075\001\002"
        + "\000\016\003\013\010\012\022\016\023\017\025\020\027"
        + "\007\001\002\000\004\010\057\001\002\000\004\010\ufffb"
        + "\001\002\000\016\003\013\010\012\022\016\023\017\025"
        + "\020\027\007\001\002\000\004\006\055\001\002\000\004"
        + "\012\024\001\002\000\016\006\ufff5\011\ufff5\012\ufff5\022"
        + "\016\023\017\025\020\001\002\000\016\006\ufff9\011\ufff9"
        + "\012\ufff9\022\016\023\017\025\020\001\002\000\016\006"
        + "\ufff6\011\ufff6\012\ufff6\022\016\023\017\025\020\001\002"
        + "\000\010\006\ufff8\011\ufff8\012\ufff8\001\002\000\010\006"
        + "\ufff7\011\ufff7\012\ufff7\001\002\000\010\006\ufff4\011\ufff4"
        + "\012\ufff4\001\002\000\024\005\035\011\034\015\032\016"
        + "\031\017\026\020\027\021\025\025\036\026\033\001\002"
        + "\000\024\005\035\011\034\015\032\016\031\017\026\020"
        + "\027\021\025\025\036\026\033\001\002\000\024\005\035"
        + "\011\034\015\032\016\031\017\026\020\027\021\025\025"
        + "\036\026\033\001\002\000\024\005\035\011\034\015\032"
        + "\016\031\017\026\020\027\021\025\025\036\026\033\001"
        + "\002\000\004\004\051\001\002\000\024\005\035\011\034"
        + "\015\032\016\031\017\026\020\027\021\025\025\036\026"
        + "\033\001\002\000\024\005\035\011\034\015\032\016\031"
        + "\017\026\020\027\021\025\025\036\026\033\001\002\000"
        + "\026\004\uffe2\005\uffe2\011\uffe2\015\uffe2\016\uffe2\017\uffe2"
        + "\020\uffe2\021\uffe2\025\uffe2\026\uffe2\001\002\000\006\022"
        + "\042\025\041\001\002\000\010\022\016\023\017\025\020"
        + "\001\002\000\026\004\uffe3\005\uffe3\011\uffe3\015\uffe3\016"
        + "\uffe3\017\uffe3\020\uffe3\021\uffe3\025\uffe3\026\uffe3\001\002"
        + "\000\004\006\040\001\002\000\026\004\uffeb\005\uffeb\011"
        + "\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\025\uffeb"
        + "\026\uffeb\001\002\000\004\011\044\001\002\000\004\011"
        + "\043\001\002\000\026\004\uffe4\005\uffe4\011\uffe4\015\uffe4"
        + "\016\uffe4\017\uffe4\020\uffe4\021\uffe4\025\uffe4\026\uffe4\001"
        + "\002\000\026\004\uffe5\005\uffe5\011\uffe5\015\uffe5\016\uffe5"
        + "\017\uffe5\020\uffe5\021\uffe5\025\uffe5\026\uffe5\001\002\000"
        + "\024\005\035\011\034\015\032\016\031\017\026\020\027"
        + "\021\025\025\036\026\033\001\002\000\026\004\uffea\005"
        + "\uffea\011\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea"
        + "\025\uffea\026\uffea\001\002\000\024\005\035\011\034\015"
        + "\032\016\031\017\026\020\027\021\025\025\036\026\033"
        + "\001\002\000\026\004\uffe9\005\uffe9\011\uffe9\015\uffe9\016"
        + "\uffe9\017\uffe9\020\uffe9\021\uffe9\025\uffe9\026\uffe9\001\002"
        + "\000\016\003\uffec\010\uffec\022\uffec\023\uffec\025\uffec\027"
        + "\uffec\001\002\000\026\004\uffe7\005\uffe7\011\uffe7\015\uffe7"
        + "\016\uffe7\017\uffe7\020\uffe7\021\uffe7\025\uffe7\026\uffe7\001"
        + "\002\000\026\004\uffe8\005\uffe8\011\uffe8\015\uffe8\016\uffe8"
        + "\017\uffe8\020\uffe8\021\uffe8\025\uffe8\026\uffe8\001\002\000"
        + "\026\004\uffe6\005\uffe6\011\uffe6\015\uffe6\016\uffe6\017\uffe6"
        + "\020\uffe6\021\uffe6\025\uffe6\026\uffe6\001\002\000\004\002"
        + "\000\001\002\000\004\010\ufffc\001\002\000\004\023\060"
        + "\001\002\000\004\007\062\001\002\000\004\006\uffff\001"
        + "\002\000\004\011\063\001\002\000\012\022\016\023\017"
        + "\024\065\025\020\001\002\000\004\011\071\001\002\000"
        + "\004\011\066\001\002\000\004\004\067\001\002\000\006"
        + "\006\uffe0\023\060\001\002\000\004\006\uffe1\001\002\000"
        + "\004\004\072\001\002\000\006\006\uffde\023\060\001\002"
        + "\000\004\006\uffdf\001\002\000\004\010\ufffe\001\002\000"
        + "\010\022\016\023\017\025\020\001\002\000\004\012\077"
        + "\001\002\000\010\014\100\022\103\025\102\001\002\000"
        + "\010\014\100\022\103\025\102\001\002\000\004\004\112"
        + "\001\002\000\014\004\uffee\013\107\014\100\022\103\025"
        + "\102\001\002\000\014\004\uffed\013\104\014\100\022\103"
        + "\025\102\001\002\000\004\022\106\001\002\000\004\004"
        + "\ufff0\001\002\000\004\004\ufff2\001\002\000\004\025\111"
        + "\001\002\000\004\004\ufff1\001\002\000\004\004\ufff3\001"
        + "\002\000\016\003\ufffa\010\ufffa\022\ufffa\023\ufffa\025\ufffa"
        + "\027\ufffa\001\002\000\004\004\uffef\001\002\000\004\010"
        + "\ufffd\001\002\000\004\002\001\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table
            = unpackFromStrings(new String[]{
        "\000\113\000\004\002\003\001\001\000\002\001\001\000"
        + "\014\003\013\004\010\005\007\007\005\012\014\001\001"
        + "\000\012\004\113\005\007\007\005\012\014\001\001\000"
        + "\002\001\001\000\012\004\073\005\007\007\005\012\014"
        + "\001\001\000\002\001\001\000\002\001\001\000\012\004"
        + "\055\005\007\007\005\012\014\001\001\000\002\001\001"
        + "\000\002\001\001\000\004\012\022\001\001\000\004\012"
        + "\021\001\001\000\004\012\020\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\004\010\027\001"
        + "\001\000\004\010\053\001\001\000\004\010\052\001\001"
        + "\000\004\010\051\001\001\000\002\001\001\000\004\010"
        + "\046\001\001\000\004\010\044\001\001\000\002\001\001"
        + "\000\002\001\001\000\004\012\036\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\004\010\045\001\001\000\002\001\001\000\004\010\047"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\004\011\060\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\004\012\063"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\004\011\067\001\001\000\002\001\001\000\002"
        + "\001\001\000\004\011\072\001\001\000\002\001\001\000"
        + "\002\001\001\000\004\012\075\001\001\000\002\001\001"
        + "\000\004\006\100\001\001\000\004\006\112\001\001\000"
        + "\002\001\001\000\004\006\107\001\001\000\004\006\104"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$Sintactico$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$Sintactico$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /** <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

    //Variable utilizada para almacenar los arboles
    //public LinkedList<Arbol> Arboles = new LinkedList<Arbol>();
    //variables utilizadas para identificar hojas y nodos
    public int identificador = 0;
    public int identificadorNodos = 0;

    //Método al que se llama automáticamente ante algún error sintactico.
    public void syntax_error(Symbol s) {
        System.out.println("Error Sintáctico en la Línea " + (s.left)
                + " Columna " + s.right + ". No se esperaba este componente: " + s.value + ".");
    }

    //Método al que se llama automáticamente ante algún error sintáctico 
    //en el que ya no es posible una recuperación de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.out.println("Error síntactico irrecuperable en la Línea "
                + (s.left) + " Columna " + s.right + ". Componente " + s.value
                + " no reconocido.");
    }

    /*public LinkedList<Arbol> getArboles() {
        return Arboles;
    }*/
    /**
     * Cup generated class to encapsulate user supplied action code.
     */
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$Sintactico$actions {

        private final Sintactico parser;

        /**
         * Constructor
         */
        CUP$Sintactico$actions(Sintactico parser) {
            this.parser = parser;
        }

        /**
         * Method 0 with the actual generated action code for actions 0 to 300.
         */
        public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
                int CUP$Sintactico$act_num,
                java_cup.runtime.lr_parser CUP$Sintactico$parser,
                java.util.Stack CUP$Sintactico$stack,
                int CUP$Sintactico$top)
                throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$Sintactico$result;

            /* select the action based on the action number */
            switch (CUP$Sintactico$act_num) {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // $START ::= ini EOF 
                {
                    Object RESULT = null;
                    int start_valleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                    int start_valright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                    Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                    RESULT = start_val;
                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$Sintactico$parser.done_parsing();
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // ini ::= LLAVEIZQ cuerpo LLAVEDER 
                {
                    Object RESULT = null;

                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini", 0, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // cuerpo ::= declaraciones PORCENTDOB expEvaluar 
                {
                    Object RESULT = null;

                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo", 1, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // declaraciones ::= defConjunto declaraciones 
                {
                    Object RESULT = null;

                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones", 2, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // declaraciones ::= defExpReg declaraciones 
                {
                    Object RESULT = null;

                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones", 2, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // declaraciones ::= error declaraciones 
                {
                    Object RESULT = null;

                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones", 2, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // declaraciones ::= PORCENTDOB 
                {
                    Object RESULT = null;

                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones", 2, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // defConjunto ::= RCONJ DOSPT identificador ASIGNA defNotacion PTCOMA 
                {
                    Object RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                    Object a = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                    System.out.println("El conjunto se llama: " + id + " " + a);

                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defConjunto", 3, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // identificador ::= IDENTIFICADOR 
                {
                    String RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                    String a = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                    RESULT = a;
                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("identificador", 8, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // identificador ::= CARESP identificador 
                {
                    String RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                    String a = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                    String b = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                    RESULT = a + b;
                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("identificador", 8, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // identificador ::= IDENTIFICADOR identificador 
                {
                    String RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                    String a = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                    String b = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                    RESULT = a + b;
                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("identificador", 8, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // identificador ::= CARESP 
                {
                    String RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                    String a = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                    RESULT = a;
                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("identificador", 8, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // identificador ::= CARACTER 
                {
                    String RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                    String a = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                    RESULT = a;
                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("identificador", 8, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // identificador ::= CARACTER identificador 
                {
                    String RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                    String a = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                    String b = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                    RESULT = a + b;
                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("identificador", 8, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // defNotacion ::= CARESP VIRGULILLA CARESP 
                {
                    Object RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                    String a = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                    String b = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                    RESULT = " va de " + a + " hasta " + b;
                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacion", 4, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // defNotacion ::= CARACTER VIRGULILLA CARACTER 
                {
                    Object RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                    String a = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                    String b = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                    RESULT = " va de " + a + " hasta " + b;
                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacion", 4, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // defNotacion ::= CARESP defNotacion 
                {
                    Object RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                    String a = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                    Object b = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                    RESULT = a + b;
                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacion", 4, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // defNotacion ::= CARACTER defNotacion 
                {
                    Object RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                    String a = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                    Object b = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                    RESULT = a + b;
                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacion", 4, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // defNotacion ::= COMA defNotacion 
                {
                    Object RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                    String a = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                    Object b = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                    RESULT = a + b;
                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacion", 4, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // defNotacion ::= CARESP 
                {
                    Object RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                    String a = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                    RESULT = a;
                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacion", 4, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // defNotacion ::= CARACTER 
                {
                    Object RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                    String a = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                    RESULT = a;
                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacion", 4, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // defExpReg ::= identificador ASIGNA defNotacionRegex PTCOMA 
                {
                    Object RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                    Object a = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defExpReg", 5, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 22: // defNotacionRegex ::= LLAVEIZQ identificador LLAVEDER 
                {
                    Object RESULT = null;
                    int hojaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                    int hojaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                    String hoja = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacionRegex", 6, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 23: // defNotacionRegex ::= CONCAT defNotacionRegex defNotacionRegex 
                {
                    Object RESULT = null;
                    int izqleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                    int izqright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                    Object izq = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                    int derleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                    int derright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                    Object der = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacionRegex", 6, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 24: // defNotacionRegex ::= DISYUNC defNotacionRegex defNotacionRegex 
                {
                    Object RESULT = null;
                    int izqleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                    int izqright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                    Object izq = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                    int derleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                    int derright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                    Object der = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacionRegex", 6, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 25: // defNotacionRegex ::= CEROMAS defNotacionRegex 
                {
                    Object RESULT = null;
                    int unicoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                    int unicoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                    Object unico = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacionRegex", 6, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 26: // defNotacionRegex ::= UNOMAS defNotacionRegex 
                {
                    Object RESULT = null;
                    int unicoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                    int unicoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                    Object unico = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacionRegex", 6, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 27: // defNotacionRegex ::= CEROUNA defNotacionRegex 
                {
                    Object RESULT = null;
                    int unicoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                    int unicoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                    Object unico = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacionRegex", 6, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 28: // defNotacionRegex ::= COMILLADOB CARESP COMILLADOB 
                {
                    Object RESULT = null;
                    int hojaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                    int hojaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                    String hoja = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacionRegex", 6, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 29: // defNotacionRegex ::= COMILLADOB CARACTER COMILLADOB 
                {
                    Object RESULT = null;
                    int hojaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                    int hojaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                    String hoja = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacionRegex", 6, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 30: // defNotacionRegex ::= CARESP 
                {
                    Object RESULT = null;
                    int hojaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                    int hojaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                    String hoja = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacionRegex", 6, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 31: // defNotacionRegex ::= USORESERVADAS 
                {
                    Object RESULT = null;
                    int hojaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                    int hojaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                    String hoja = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defNotacionRegex", 6, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 32: // expEvaluar ::= IDENTIFICADOR DOSPT COMILLADOB LEXEMA COMILLADOB PTCOMA expEvaluar 
                {
                    Object RESULT = null;

                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expEvaluar", 7, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 33: // expEvaluar ::= IDENTIFICADOR DOSPT COMILLADOB LEXEMA COMILLADOB PTCOMA 
                {
                    Object RESULT = null;

                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expEvaluar", 7, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 34: // expEvaluar ::= IDENTIFICADOR DOSPT COMILLADOB identificador COMILLADOB PTCOMA expEvaluar 
                {
                    Object RESULT = null;

                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expEvaluar", 7, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 35: // expEvaluar ::= IDENTIFICADOR DOSPT COMILLADOB identificador COMILLADOB PTCOMA 
                {
                    Object RESULT = null;

                    CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expEvaluar", 7, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
                }
                return CUP$Sintactico$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number " + CUP$Sintactico$act_num + "found in internal parse table");

            }
        }

        /* end of method */

        /**
         * Method splitting the generated action code into several parts.
         */
        public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
                int CUP$Sintactico$act_num,
                java_cup.runtime.lr_parser CUP$Sintactico$parser,
                java.util.Stack CUP$Sintactico$stack,
                int CUP$Sintactico$top)
                throws java.lang.Exception {
            return CUP$Sintactico$do_action_part00000000(
                    CUP$Sintactico$act_num,
                    CUP$Sintactico$parser,
                    CUP$Sintactico$stack,
                    CUP$Sintactico$top);
        }
    }

}
